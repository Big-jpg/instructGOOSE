# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/03_reward_model.ipynb.

# %% auto 0
__all__ = ['RewardModel', 'PairwiseLoss']

# %% ../nbs/03_reward_model.ipynb 3
from typing import Callable, Union, List

import torch
from torch import nn
import torch.nn.functional as F
from torch import optim
import pytorch_lightning as pl 
from transformers import AutoModel, AutoTokenizer
from einops import rearrange
from torchtyping import TensorType

from .utils import load_yaml

# %% ../nbs/03_reward_model.ipynb 5
class RewardModel(nn.Module):
    def __init__(self, checkpoint: str, dropout: float = 0.1):
        super().__init__()
        # self.tokenizer = AutoTokenizer.from_pretrained(checkpoint)
        # self.tokenizer.pad_token = self.tokenizer.eos_token
        self.model = AutoModel.from_pretrained(checkpoint)
        
        config = self.model.config
        n_embed = config.n_embd
        
        # custom head
        self.reward_head = nn.Sequential(
            nn.Dropout(dropout),
            nn.Linear(n_embed, 1),
            nn.Sigmoid()
        )
        
    def forward(
        self,
        input_ids: TensorType["batch_size", "seq_len"],
        attention_mask: TensorType["batch_size", "seq_len"],
    ) -> TensorType["batch_size", 1]:
        last_hidden_state = self.model(
            input_ids=input_ids,
            attention_mask=attention_mask,
        ).last_hidden_state
        
        output = self.reward_head(last_hidden_state)
                
        # output = rearrange(output, 'b 1 t 1 -> b t')
        # for eacb item in the batch
        # choose the hidden state of the last token as a reward!
        reward_scalar = output[:, -1, 0]
        
        return reward_scalar

# %% ../nbs/03_reward_model.ipynb 7
class PairwiseLoss(nn.Module):
    def forward(self, chosen_rewards: torch.Tensor, rejected_rewards: torch.Tensor):
        assert len(chosen_rewards) == len(rejected_rewards)
        batch_size = len(chosen_rewards)
        
        # maps the difference between the rewards to a probability
        probs = torch.sigmoid(chosen_rewards - rejected_rewards)
        return -probs.mean() / batch_size
